
#include <tuple>
#include <array>

#include "mesh.h"
#include "qtnn.h"

std::vector<vec3> boxTris = 	{{1.0f, 1.0f, 1.0f},  {-1.0f, 1.0f, 1.0f},  {-1.0f, -1.0f, 1.0f},
								{ 1.0f,  1.0f, 1.0f}, {-1.0f, -1.0f, 1.0f}, { 1.0f, -1.0f, 1.0f},
								{ 1.0f, -1.0f, -1.0f}, { 1.0f, -1.0f,  1.0f}, {-1.0f, -1.0f,  1.0f},
								{ 1.0f, -1.0f, -1.0f}, {-1.0f, -1.0f,  1.0f}, {-1.0f, -1.0f, -1.0f},
								{-1.0f, -1.0,-1.0}, {-1.0f, -1.0, 1.0}, {-1.0f,  1.0, 1.0},
								{-1.0f, -1.0f, -1.0}, {-1.0f,  1.0f,  1.0}, {-1.0f,  1.0f, -1.0},
								{-1.0f, 1.0f, -1.0f}, { 1.0f, 1.0f, -1.0f}, { 1.0f,-1.0f, -1.0f},
								{-1.0f,  1.0f, -1.0}, { 1.0f, -1.0f, -1.0}, {-1.0f, -1.0f, -1.0},
								{1.0f, 1.0f,-1.0}, {1.0f, 1.0f, 1.0}, {1.0f,-1.0f, 1.0},
								{1.0f,  1.0f, -1.0}, {1.0f, -1.0f,  1.0}, {1.0f, -1.0f, -1.0},
								{-1.0f, 1.0f,-1.0f}, {-1.0f, 1.0f, 1.0f}, { 1.0f, 1.0f, 1.0f},
								{-1.0f, 1.0, -1.0f}, { 1.0f, 1.0,  1.0f}, { 1.0f, 1.0, -1.0f}};

std::vector<vec3> boxNrmls = 	{{0.0f, 0.0f, 1.0f},
								{0.0f, 0.0f, 1.0f},
								{0.0f,-1.0f, 0.0f},
								{0.0f,-1.0f, 0.0f},
								{-1.0f,0.0f, 0.0f},
								{-1.0f,0.0f, 0.0f},
								{0.0f, 0.0f,-1.0f},
								{0.0f, 0.0f,-1.0f},
								{1.0f, 0.0f, 0.0f},
								{1.0f, 0.0f, 0.0f},
								{0.0f, 1.0f, 0.0f},
								{0.0f, 1.0f, 0.0f}};

std::vector<vec3> prismTris = {{0.000000, -0.000000, -1.000000}, {0.000000, 0.866025 ,-0.500000}, {0.750000, -0.433013, -0.500000},
							   {0.000000, 0.866025 ,-0.500000}, {0.000000, 0.866025 ,0.500000}, {0.750000, -0.433013, 0.500000},
							   {0.000000, 0.866025, -0.500000}, {0.750000, -0.433013, 0.500000}, {0.750000, -0.433013, -0.500000},
    						   {0.000000, 0.866025, 0.500000}, {-0.000000, -0.000000, 1.000000}, {0.750000, -0.433013, 0.500000},
							   {0.000000, -0.000000, -1.000000}, {0.750000, -0.433013, -0.500000}, {-0.750000, -0.433013, -0.500000},
							   {0.750000,  -0.433013, -0.500000}, {0.750000,  -0.433013, 0.500000}, {-0.750000, -0.433013, 0.500000},
							   {0.750000f, -0.433013f, -0.500000f}, {-0.750000f, -0.433013f, 0.500000f}, {-0.750000f, -0.433013f, -0.500000f},
							   {0.750000f, -0.433013f, 0.500000f}, {-0.000000f, -0.000000f, 1.000000f}, {-0.750000f, -0.433013f, 0.500000f},
							   {0.000000f, -0.000000f, -1.000000f}, {-0.750000f, -0.433013f, -0.500000f}, {0.000000f, 0.866025f, -0.500000f},
							   {-0.750000f, -0.433013f,-0.500000f}, {-0.750000f, -0.433013f, 0.500000f}, {0.000000f, 0.866025f,   0.500000f},
							   {-0.750000f, -0.433013f, -0.500000f}, { 0.000000f, 0.866025f, 0.500000f}, { 0.000000f, 0.866025f, -0.500000f},
							   {-0.750000f, -0.433013f, 0.500000f}, {-0.000000f, -0.000000f, 1.000000f}, { 0.000000f, 0.866025f, 0.500000f}};

std::vector<vec3> prismNrmls = {{0.654654, 0.377964, -0.654654},
 								{0.866026, 0.500000, -0.000000},
 								{0.866025, 0.500000, 0.000000},
 								{0.654653, 0.377964, 0.654654},
 								{-0.000000, -0.755929, -0.654654},
 								{-0.000000, -1.000000, -0.000000},
 								{-0.000000, -1.000000, 0.000000},
 								{-0.000000f, -0.755929f, 0.654654f},
 								{-0.654653f, 0.377964f, -0.654654f},
 								{-0.866025f, 0.500000f, 0.000000f},
 								{-0.866025f, 0.500000f, -0.000000},
 								{-0.654654f, 0.377964f, 0.654654f}};

std::vector<vec3> icosahedrTris = {{0.000000f, 0.000000f, -1.000000f}, {0.723600f, -0.525720f, -0.447215f}, {-0.276385f, -0.850640f, -0.447215f},
								   {0.723600f, -0.525720f, -0.447215f}, {0.000000f, 0.000000f, -1.000000f}, {0.723600f, 0.525720f, -0.447215f},
								   {0.000000f, 0.000000f, -1.000000f}, {-0.276385f, -0.850640f, -0.447215f}, {-0.894425f, 0.000000f, -0.447215f},
								   {0.000000f, 0.000000f, -1.000000f}, {-0.894425f, 0.000000f, -0.447215f}, {-0.276385f, 0.850640f, -0.447215f},
								   {0.000000f, 0.000000f, -1.000000f}, {-0.276385f, 0.850640f, -0.447215f}, {0.723600f, 0.525720f, -0.447215f},
								   {0.723600f, -0.525720f, -0.447215f}, {0.723600f, 0.525720f, -0.447215f}, {0.894425f, 0.000000f, 0.447215f},
								   {-0.276385f, -0.850640f, -0.447215f}, {0.723600f, -0.525720f, -0.447215f}, {0.276385f, -0.850640f, 0.447215f},
								   {-0.894425f, 0.000000f, -0.447215f}, {-0.276385f, -0.850640f, -0.447215f}, {-0.723600f, -0.525720f, 0.447215f},
								   {-0.276385f, 0.850640f, -0.447215f}, {-0.894425f, 0.000000f, -0.447215f}, {-0.723600f, 0.525720f, 0.447215f},
								   {0.723600f, 0.525720f, -0.447215f}, {-0.276385f, 0.850640f, -0.447215f}, {0.276385f, 0.850640f, 0.447215f},
								   {0.723600f, -0.525720f, -0.447215f}, {0.894425f, 0.000000f, 0.447215f}, {0.276385f, -0.850640f, 0.447215f},
								   {-0.276385f, -0.850640f, -0.447215f}, {0.276385f, -0.850640f, 0.447215f}, {-0.723600f, -0.525720f, 0.447215f},
								   {-0.894425f, 0.000000f, -0.447215f}, {-0.723600f, -0.525720f, 0.447215f}, {-0.723600f, 0.525720f, 0.447215f},
								   {-0.276385f, 0.850640f, -0.447215f}, {-0.723600f, 0.525720f, 0.447215f}, {0.276385f, 0.850640f, 0.447215f},
								   {0.723600f, 0.525720f, -0.447215f}, {0.276385f, 0.850640f, 0.447215f}, {0.894425f, 0.000000f, 0.447215f},
								   {0.276385f, -0.850640f, 0.447215f}, {0.894425f, 0.000000f, 0.447215f}, {0.000000f, 0.000000f, 1.000000f},
								   {-0.723600f, -0.525720f, 0.447215f}, {0.276385f, -0.850640f, 0.447215f}, {0.000000f, 0.000000f, 1.000000f},
								   {-0.723600f, 0.525720f, 0.447215f}, {-0.723600f, -0.525720f, 0.447215f}, {0.000000f, 0.000000f, 1.000000f},
								   {0.276385f, 0.850640f, 0.447215f}, {-0.723600f, 0.525720f, 0.447215f}, {0.000000f, 0.000000f, 1.000000f},
								   {0.894425f, 0.000000f, 0.447215f}, {0.276385f, 0.850640f, 0.447215f}, {0.000000f, 0.000000f, 1.000000f}};

std::vector<vec3> icosahedrNrmls = {{0.187597f, -0.577354f, -0.794651},
 									{0.607065f, 0.000000f, -0.794652f},
 									{-0.491122f, -0.356829f, -0.794652f},
 									{-0.491122f, 0.356829f, -0.794652f},
 									{0.187597f, 0.577354f, -0.794651f},
 									{0.982246f, 0.000000f, -0.187597f},
 									{0.303536f, -0.934171f, -0.187589f},
 									{-0.794649f, -0.577359f, -0.187587f},
 									{-0.794649f, 0.577359f, -0.187587f},
 									{0.303536f, 0.934171f, -0.187589f},
 									{0.794649f, -0.577359f, 0.187587f},
 									{-0.303536f, -0.934171f, 0.187589f},
 									{-0.982246f, 0.000000f, 0.187597f},
 									{-0.303536f, 0.934171f, 0.187589f},
 									{0.794649, 0.577359f, 0.187587f},
 									{0.491122f, -0.356829f, 0.794652f},
 									{-0.187596f, -0.577354f, 0.794651f},
 									{-0.607065f, 0.000000f, 0.794652f},
 									{-0.187597f, 0.577354f, 0.794651f},
 									{0.491122f, 0.356829f, 0.794652f}};

BasicBody::BasicBody(int type, vec3 offst, vec3 orn, vec3 scl) {
	BodyOrientation = orn;
    BodyOffset = offst;
	BodyScale = scl;

	switch (type) {
		case BasicBody::ICOSAHEDRON:
			BodyTriangles = icosahedrTris;
			BodyNormals = icosahedrNrmls;
			break;

		case BasicBody::BOX:
			BodyTriangles = boxTris;
			BodyNormals = boxNrmls;
			break;

		case BasicBody::PRISM:
			BodyTriangles = prismTris;
			BodyNormals = prismNrmls;
			break;
	}
}

BasicBody::~BasicBody() {

}

void BasicBody::updateAndDraw() {
	vec3 cur_tri[3];
	vec3 cur_nrml;
	
	mtrx4 mRotate = mtrx4();//mtrx4FromEuler(BodyOrientation[0], BodyOrientation[1], BodyOrientation[2]);

	mtrx4 mOffset = mtrx4FromOffset(BodyOffset);
	mtrx4 mScale = mtrx4FromScale(BodyScale);

	// mtrx4 tmp = mtrx4Mult(mScale, mRotate);
	// mtrx4 mAffine = mtrx4Mult(tmp, mOffset);

	mtrx4 mAffine = mScale * mRotate * mOffset;

	for (size_t i = 0; i < BodyTriangles.size()/3; i++ ) {
		cur_tri[2] = mtrx4MultVec3(mAffine, BodyTriangles[i*3+0]);
		cur_tri[1] = mtrx4MultVec3(mAffine, BodyTriangles[i*3+1]);
		cur_tri[0] = mtrx4MultVec3(mAffine, BodyTriangles[i*3+2]);
		
		cur_nrml = mtrx4MultVec3(mRotate, BodyNormals[i]);
		
		glColor3f(0.3f, 0.6f, 1.0f);
		glBegin(GL_TRIANGLES);
			glNormal3fv(&cur_nrml[0]);
			glVertex3fv(&cur_tri[0][0]);
			glVertex3fv(&cur_tri[1][0]);
			glVertex3fv(&cur_tri[2][0]);
		glEnd();
	}
}

void BasicBody::setOrientation(float yaw, float pitch, float roll) {
	BodyOrientation = vec3(yaw, pitch, roll);
}

void BasicBody::setOffset(float dx, float dy, float dz){
	BodyOffset = vec3(dx, dy, dz);
}